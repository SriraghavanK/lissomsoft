"use client"

// MySmartGrc.js - A React component for GRC management

import { useState, useEffect } from "react"
import { motion } from "framer-motion"

const MySmartGrc = () => {
  const [activeTab, setActiveTab] = useState("vendor-risk")
  const [activeApproachTab, setActiveApproachTab] = useState("methodology")

  // useEffect to handle hash navigation on load
  useEffect(() => {
    const hash = window.location.hash
    if (hash) {
      // Set a timeout to ensure the DOM is fully loaded
      setTimeout(() => {
        console.log("Processing hash:", hash)

        // Set the active tab based on the hash
        if (hash.includes("vendor")) {
          setActiveTab("vendor-risk")
        } else if (hash.includes("it")) {
          setActiveTab("it-cyber-risk")
        } else if (hash.includes("implementation")) {
          console.log("Setting active approach tab to implementation")
          setActiveApproachTab("implementation")
        } else if (hash.includes("methodology")) {
          setActiveApproachTab("methodology")
        }

        // Find the element by ID
        const id = hash.replace("#", "")
        const element = document.getElementById(id)

        if (element) {
          console.log(`Found element with id: ${id}`)
          // Adjust for header height
          const headerHeight = 150
          const elementPosition = element.getBoundingClientRect().top + window.scrollY
          const offsetPosition = elementPosition - headerHeight

          window.scrollTo({
            top: offsetPosition,
            behavior: "smooth",
          })

          // Highlight the section
          element.classList.add("highlight-section")
          setTimeout(() => {
            element.classList.remove("highlight-section")
          }, 2000)
        } else {
          console.error(`Section with ID "${id}" not found`)
          // Log all available IDs for debugging
          const allIds = Array.from(document.querySelectorAll("[id]")).map((el) => el.id)
          console.log("Available IDs:", allIds)

          // Try to find the section by alternative means
          if (id === "approach-implementation" || id === "implementation") {
            console.log("Trying to find implementation section by alternative means")
            const implementationSection = document.querySelector('[data-section="approach-implementation"]')
            if (implementationSection) {
              console.log("Found implementation section by data-section attribute")
              const headerHeight = 150
              const elementPosition = implementationSection.getBoundingClientRect().top + window.scrollY
              const offsetPosition = elementPosition - headerHeight

              window.scrollTo({
                top: offsetPosition,
                behavior: "smooth",
              })

              // Set active tab
              setActiveApproachTab("implementation")

              // Highlight the section
              implementationSection.classList.add("highlight-section")
              setTimeout(() => {
                implementationSection.classList.remove("highlight-section")
              }, 2000)
            }
          }
        }
      }, 500)
    }
  }, [])

  // Function to handle tab changes
  const handleTabChange = (tab) => {
    setActiveTab(tab)
  }

  // Function to handle approach tab changes
  const handleApproachTabChange = (tab) => {
    setActiveApproachTab(tab)
  }

  // Add this function to ensure the implementation button works correctly
  const handleImplementationClick = () => {
    setActiveApproachTab("implementation")

    // Make sure we're scrolling to the correct element
    const implementationSection = document.getElementById("approach-implementation")
    if (implementationSection) {
      const headerHeight = 150
      const elementPosition = implementationSection.getBoundingClientRect().top + window.scrollY
      const offsetPosition = elementPosition - headerHeight

      window.scrollTo({
        top: offsetPosition,
        behavior: "smooth",
      })

      // Update URL hash
      window.location.hash = "approach-implementation"

      // Highlight the section
      implementationSection.classList.add("highlight-section")
      setTimeout(() => {
        implementationSection.classList.remove("highlight-section")
      }, 2000)
    } else {
      console.error("Implementation section not found")
      // Try alternative selector
      const altImplementationSection = document.querySelector('[data-section="approach-implementation"]')
      if (altImplementationSection) {
        const headerHeight = 150
        const elementPosition = altImplementationSection.getBoundingClientRect().top + window.scrollY
        const offsetPosition = elementPosition - headerHeight

        window.scrollTo({
          top: offsetPosition,
          behavior: "smooth",
        })

        // Update URL hash
        window.location.hash = "approach-implementation"
      }
    }
  }

  return (
    <div>
      {/* Tab Navigation */}
      <div className="tabs">
        <button
          className={`tab ${activeTab === "vendor-risk" ? "active" : ""}`}
          onClick={() => handleTabChange("vendor-risk")}
        >
          Vendor Risk
        </button>
        <button
          className={`tab ${activeTab === "it-cyber-risk" ? "active" : ""}`}
          onClick={() => handleTabChange("it-cyber-risk")}
        >
          IT & Cyber Risk
        </button>
      </div>

      {/* Approach Tabs */}
      <div className="approach-tabs">
        <motion.button
          className={`btn ${activeApproachTab === "methodology" ? "btn-primary" : "btn-outline-primary"}`}
          onClick={() => handleApproachTabChange("methodology")}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          animate={{
            backgroundColor: activeApproachTab === "methodology" ? "#0077b6" : "transparent",
            color: activeApproachTab === "methodology" ? "white" : "#0077b6",
            boxShadow: activeApproachTab === "methodology" ? "0 4px 15px rgba(0, 119, 182, 0.3)" : "none",
          }}
          transition={{ duration: 0.3 }}
        >
          Methodology
        </motion.button>
        <motion.button
          className={`btn ${activeApproachTab === "implementation" ? "btn-primary" : "btn-outline-primary"}`}
          onClick={handleImplementationClick}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          animate={{
            backgroundColor: activeApproachTab === "implementation" ? "#0077b6" : "transparent",
            color: activeApproachTab === "implementation" ? "white" : "#0077b6",
            boxShadow: activeApproachTab === "implementation" ? "0 4px 15px rgba(0, 119, 182, 0.3)" : "none",
          }}
          transition={{ duration: 0.3 }}
        >
          Implementation
        </motion.button>
      </div>

      {/* Content based on active tab */}
      {activeTab === "vendor-risk" && (
        <div id="vendor-risk-content">
          <h2>Vendor Risk Content</h2>
          <p>This is the content for Vendor Risk.</p>
          <section id="section1">Section 1</section>
          <section id="section2">Section 2</section>
        </div>
      )}

      {activeTab === "it-cyber-risk" && (
        <div id="it-cyber-risk-content">
          <h2>IT & Cyber Risk Content</h2>
          <p>This is the content for IT & Cyber Risk.</p>
        </div>
      )}

      {/* Content based on active approach tab */}
      {activeApproachTab === "methodology" && (
        <div id="methodology-content">
          <h2>Methodology Content</h2>
          <p>This is the content for the Methodology approach.</p>
        </div>
      )}

      {activeApproachTab === "implementation" && (
        <div id="approach-implementation" data-section="approach-implementation">
          <h2>Implementation Content</h2>
          <p>This is the content for the Implementation approach.</p>
        </div>
      )}
    </div>
  )
}

export default MySmartGrc
